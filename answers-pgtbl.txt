Which other xv6 system call(s) could be made faster using this shared page? Explain how.

例如 fstat ，可以直接将 struct stat 保存到共享页中，直接返回指向共享页中结构的用户虚拟地址，这样就省去一次从内核内存到用户内存的拷贝，其他的系统调用像


For every leaf page in the vmprint output, explain what it logically contains and what its permission bits are. Figure 3.4 in the xv6 book might be helpful, although note that the figure might have a slightly different set of pages than the init process that's being inspected here.

page table 0x0000000087f6b000
 ..0: pte 0x0000000021fd9c01 pa 0x0000000087f67000
 .. ..0: pte 0x0000000021fd9801 pa 0x0000000087f66000
 .. .. ..0: pte 0x0000000021fda01b pa 0x0000000087f68000     // text       R-XU
 .. .. ..1: pte 0x0000000021fd9417 pa 0x0000000087f65000     // data       RW-U
 .. .. ..2: pte 0x0000000021fd9007 pa 0x0000000087f64000     // stack      RW-U
 .. .. ..3: pte 0x0000000021fd8c17 pa 0x0000000087f63000     // heap       RW-U
 ..255: pte 0x0000000021fda801 pa 0x0000000087f6a000
 .. ..511: pte 0x0000000021fda401 pa 0x0000000087f69000
 .. .. ..509: pte 0x0000000021fdcc13 pa 0x0000000087f73000   // usyscall   R--U
 .. .. ..510: pte 0x0000000021fdd007 pa 0x0000000087f74000   // trapframe  RW--
 .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000   // trampoline R-X-

objdump -p user/_init

user/_init：     文件格式 elf64-little

程序头：
0x70000003 off    0x0000000000006ce9 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**0
         filesz 0x0000000000000033 memsz 0x0000000000000000 flags r--
    LOAD off    0x0000000000001000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000001000 memsz 0x0000000000001000 flags r-x
    LOAD off    0x0000000000002000 vaddr 0x0000000000001000 paddr 0x0000000000001000 align 2**12
         filesz 0x0000000000000010 memsz 0x0000000000000030 flags rw-
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-

